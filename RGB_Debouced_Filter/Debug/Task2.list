
Task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c8  080004d0  000104d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  000104d0  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  000104d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004d0  000104d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004d0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c8  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000273  00000000  00000000  00010ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00011140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  000111c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000abb  00000000  00000000  0001ef87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb3f  00000000  00000000  0001fa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000118  00000000  00000000  0006f5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b0 	.word	0x080004b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004b0 	.word	0x080004b0

080001d4 <main>:
void MYOUTPUT (void);
void INPUT (void);
void Delay_fn (void);
int count = 0;
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  while (1)
  {

INPUT();
 80001d8:	f000 f8ec 	bl	80003b4 <INPUT>
MYOUTPUT();
 80001dc:	f000 f8c6 	bl	800036c <MYOUTPUT>
Delay_fn();
 80001e0:	f000 f8ae 	bl	8000340 <Delay_fn>
		  if(!(GPIOB_IDR & (1<<3)))
 80001e4:	4b53      	ldr	r3, [pc, #332]	; (8000334 <main+0x160>)
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f003 0308 	and.w	r3, r3, #8
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10b      	bne.n	8000208 <main+0x34>
		  {
			while(!(GPIOB_IDR & (1<<3)));
 80001f0:	bf00      	nop
 80001f2:	4b50      	ldr	r3, [pc, #320]	; (8000334 <main+0x160>)
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	f003 0308 	and.w	r3, r3, #8
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0f9      	beq.n	80001f2 <main+0x1e>
			count++;
 80001fe:	4b4e      	ldr	r3, [pc, #312]	; (8000338 <main+0x164>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3301      	adds	r3, #1
 8000204:	4a4c      	ldr	r2, [pc, #304]	; (8000338 <main+0x164>)
 8000206:	6013      	str	r3, [r2, #0]
		  }
switch (count%9)
 8000208:	4b4b      	ldr	r3, [pc, #300]	; (8000338 <main+0x164>)
 800020a:	6819      	ldr	r1, [r3, #0]
 800020c:	4b4b      	ldr	r3, [pc, #300]	; (800033c <main+0x168>)
 800020e:	fb83 2301 	smull	r2, r3, r3, r1
 8000212:	105a      	asrs	r2, r3, #1
 8000214:	17cb      	asrs	r3, r1, #31
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	4613      	mov	r3, r2
 800021a:	00db      	lsls	r3, r3, #3
 800021c:	4413      	add	r3, r2
 800021e:	1aca      	subs	r2, r1, r3
 8000220:	1e53      	subs	r3, r2, #1
 8000222:	2b07      	cmp	r3, #7
 8000224:	f200 8083 	bhi.w	800032e <main+0x15a>
 8000228:	a201      	add	r2, pc, #4	; (adr r2, 8000230 <main+0x5c>)
 800022a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022e:	bf00      	nop
 8000230:	08000251 	.word	0x08000251
 8000234:	08000263 	.word	0x08000263
 8000238:	08000281 	.word	0x08000281
 800023c:	0800029f 	.word	0x0800029f
 8000240:	080002bd 	.word	0x080002bd
 8000244:	080002db 	.word	0x080002db
 8000248:	080002f9 	.word	0x080002f9
 800024c:	08000317 	.word	0x08000317
{
	case 1:
		GPIOB_ODR &= ~((1<<5)|(1<<6)|(1<<7));
 8000250:	4b38      	ldr	r3, [pc, #224]	; (8000334 <main+0x160>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a37      	ldr	r2, [pc, #220]	; (8000334 <main+0x160>)
 8000256:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800025a:	6153      	str	r3, [r2, #20]
		Delay_fn();
 800025c:	f000 f870 	bl	8000340 <Delay_fn>
		break;
 8000260:	e066      	b.n	8000330 <main+0x15c>
	case 2:
		GPIOB_ODR &= ~((1<<6)|(1<<7));
 8000262:	4b34      	ldr	r3, [pc, #208]	; (8000334 <main+0x160>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a33      	ldr	r2, [pc, #204]	; (8000334 <main+0x160>)
 8000268:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800026c:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= (1<<5);
 800026e:	4b31      	ldr	r3, [pc, #196]	; (8000334 <main+0x160>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a30      	ldr	r2, [pc, #192]	; (8000334 <main+0x160>)
 8000274:	f043 0320 	orr.w	r3, r3, #32
 8000278:	6153      	str	r3, [r2, #20]
		Delay_fn();
 800027a:	f000 f861 	bl	8000340 <Delay_fn>
		break;
 800027e:	e057      	b.n	8000330 <main+0x15c>
	case 3:
		GPIOB_ODR &= ~((1<<5)|(1<<7));
 8000280:	4b2c      	ldr	r3, [pc, #176]	; (8000334 <main+0x160>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a2b      	ldr	r2, [pc, #172]	; (8000334 <main+0x160>)
 8000286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800028a:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= (1<<6);
 800028c:	4b29      	ldr	r3, [pc, #164]	; (8000334 <main+0x160>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a28      	ldr	r2, [pc, #160]	; (8000334 <main+0x160>)
 8000292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000296:	6153      	str	r3, [r2, #20]
		Delay_fn();
 8000298:	f000 f852 	bl	8000340 <Delay_fn>
		break;
 800029c:	e048      	b.n	8000330 <main+0x15c>
	case 4:
		GPIOB_ODR &= ~(1<<7);
 800029e:	4b25      	ldr	r3, [pc, #148]	; (8000334 <main+0x160>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a24      	ldr	r2, [pc, #144]	; (8000334 <main+0x160>)
 80002a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002a8:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= ((1<<5)|(1<<6));
 80002aa:	4b22      	ldr	r3, [pc, #136]	; (8000334 <main+0x160>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a21      	ldr	r2, [pc, #132]	; (8000334 <main+0x160>)
 80002b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002b4:	6153      	str	r3, [r2, #20]
		Delay_fn();
 80002b6:	f000 f843 	bl	8000340 <Delay_fn>
		break;
 80002ba:	e039      	b.n	8000330 <main+0x15c>
	case 5:
		GPIOB_ODR &= ~((1<<5)|(1<<6));
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <main+0x160>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <main+0x160>)
 80002c2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80002c6:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= (1<<7);
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0x160>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a19      	ldr	r2, [pc, #100]	; (8000334 <main+0x160>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6153      	str	r3, [r2, #20]
		Delay_fn();
 80002d4:	f000 f834 	bl	8000340 <Delay_fn>
		break;
 80002d8:	e02a      	b.n	8000330 <main+0x15c>
	case 6:
		GPIOB_ODR &= ~(1<<6);
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0x160>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a15      	ldr	r2, [pc, #84]	; (8000334 <main+0x160>)
 80002e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002e4:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= ((1<<5)|(1<<7));
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <main+0x160>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <main+0x160>)
 80002ec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002f0:	6153      	str	r3, [r2, #20]
		Delay_fn();
 80002f2:	f000 f825 	bl	8000340 <Delay_fn>
		break;
 80002f6:	e01b      	b.n	8000330 <main+0x15c>
	case 7:
		GPIOB_ODR &= ~(1<<5);
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0x160>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <main+0x160>)
 80002fe:	f023 0320 	bic.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
		GPIOB_ODR |= ((1<<6)|(1<<7));
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x160>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <main+0x160>)
 800030a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800030e:	6153      	str	r3, [r2, #20]
		Delay_fn();
 8000310:	f000 f816 	bl	8000340 <Delay_fn>
		break;
 8000314:	e00c      	b.n	8000330 <main+0x15c>
	case 8:
		GPIOB_ODR |= ((1<<5)|(1<<6)|(1<<7));
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0x160>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a06      	ldr	r2, [pc, #24]	; (8000334 <main+0x160>)
 800031c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000320:	6153      	str	r3, [r2, #20]
		Delay_fn();
 8000322:	f000 f80d 	bl	8000340 <Delay_fn>
		count = 0;
 8000326:	4b04      	ldr	r3, [pc, #16]	; (8000338 <main+0x164>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
		break;
 800032c:	e000      	b.n	8000330 <main+0x15c>
	default:
		break;
 800032e:	bf00      	nop
INPUT();
 8000330:	e752      	b.n	80001d8 <main+0x4>
 8000332:	bf00      	nop
 8000334:	40020400 	.word	0x40020400
 8000338:	2000001c 	.word	0x2000001c
 800033c:	38e38e39 	.word	0x38e38e39

08000340 <Delay_fn>:
*/
  }
  return 0;
}
void Delay_fn (void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
	int i ;
	for (i=0; i<50000; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e002      	b.n	8000352 <Delay_fn+0x12>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000358:	4293      	cmp	r3, r2
 800035a:	ddf7      	ble.n	800034c <Delay_fn+0xc>
	{}
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <MYOUTPUT>:
void MYOUTPUT (void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	3. Configure the OUTPUT Type mode
	4. Configure PULLING register
	************************************************/

	// 1. Enable GPIOB clock
	RCC_AHB1ENR |= (1<<1);
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MYOUTPUT+0x40>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <MYOUTPUT+0x40>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
	// 2. Set the PIN PB5,6,7 as output size 2bit
	GPIOB_MODER |= ((0x01<<10)|(0x01<<12)|(0x01<<14));
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MYOUTPUT+0x44>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <MYOUTPUT+0x44>)
 8000382:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000386:	6013      	str	r3, [r2, #0]
	// 3.choose the output type push-pull size 1 bit
	GPIOB_OTYPER &= ~((0x01<<5)|(1<<6)|(1<<7));
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MYOUTPUT+0x44>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <MYOUTPUT+0x44>)
 800038e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000392:	6053      	str	r3, [r2, #4]
	// 4.  NO PULL UP OR PULL DOWN
	GPIOB_PUPDR &= ~((0x01<<10)|(0x01<<12)|(0x01<<14));
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MYOUTPUT+0x44>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <MYOUTPUT+0x44>)
 800039a:	f423 43a8 	bic.w	r3, r3, #21504	; 0x5400
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400

080003b4 <INPUT>:
void INPUT (void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	1. Enable GPIOB clock
	2. Set the PIN PB3 as input
	3. Configure the Pull UP mode
	************************************************/
	// 1. Enable GPIOB clock
	RCC_AHB1ENR |= (1<<1);
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <INPUT+0x34>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <INPUT+0x34>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
	// 2. Set the PIN PB3 as input pin #6 and pin #7 must be 00
	GPIOB_MODER &= ~(0x01<<6);
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <INPUT+0x38>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a08      	ldr	r2, [pc, #32]	; (80003ec <INPUT+0x38>)
 80003ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ce:	6013      	str	r3, [r2, #0]
	// 3.Configure PULLING register
	GPIOB_PUPDR |= (0x01<<6);
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <INPUT+0x38>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <INPUT+0x38>)
 80003d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003da:	60d3      	str	r3, [r2, #12]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020400 	.word	0x40020400

080003f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <SystemInit+0x20>)
 80003f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fa:	4a05      	ldr	r2, [pc, #20]	; (8000410 <SystemInit+0x20>)
 80003fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800044c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800041a:	490e      	ldr	r1, [pc, #56]	; (8000454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000430:	4c0b      	ldr	r4, [pc, #44]	; (8000460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800043e:	f7ff ffd7 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000446:	f7ff fec5 	bl	80001d4 <main>
  bx  lr    
 800044a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800044c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000020 	.word	0x20000020

08000464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	; (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	; (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	; (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004c8 	.word	0x080004c8
 80004a8:	080004c8 	.word	0x080004c8
 80004ac:	080004cc 	.word	0x080004cc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
