
Task4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a4c  08000a4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a4c  08000a4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08000a4c  08000a4c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a4c  08000a4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a4c  08000a4c  00010a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a50  08000a50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08000a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000078  08000acc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08000acc  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009de  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000038e  00000000  00000000  00020a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00020e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00020ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de28  00000000  00000000  00020f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000111a  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fd02  00000000  00000000  0002feb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fbb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001fc  00000000  00000000  0007fc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a34 	.word	0x08000a34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08000a34 	.word	0x08000a34

080001d4 <GPIO_EnableClock>:
#define _OUTTYPE_SHIFT 0

#define _PUPD_MASK ((unsigned char)0x06)
#define _PUPD_SHIFT 1

void GPIO_EnableClock(unsigned char Port_ID) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	switch (Port_ID) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <GPIO_EnableClock+0x16>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d015      	beq.n	8000214 <GPIO_EnableClock+0x40>
		break;
	case 1:
		*bass_add[Port_ID][10] |= (0x01 << 1);
		break;
	default:
		break;
 80001e8:	e029      	b.n	800023e <GPIO_EnableClock+0x6a>
		*bass_add[Port_ID][10] |= (0x01 << 0);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a17      	ldr	r2, [pc, #92]	; (800024c <GPIO_EnableClock+0x78>)
 80001ee:	212c      	movs	r1, #44	; 0x2c
 80001f0:	fb01 f303 	mul.w	r3, r1, r3
 80001f4:	4413      	add	r3, r2
 80001f6:	3328      	adds	r3, #40	; 0x28
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4913      	ldr	r1, [pc, #76]	; (800024c <GPIO_EnableClock+0x78>)
 8000200:	202c      	movs	r0, #44	; 0x2c
 8000202:	fb00 f303 	mul.w	r3, r0, r3
 8000206:	440b      	add	r3, r1
 8000208:	3328      	adds	r3, #40	; 0x28
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f042 0201 	orr.w	r2, r2, #1
 8000210:	601a      	str	r2, [r3, #0]
		break;
 8000212:	e014      	b.n	800023e <GPIO_EnableClock+0x6a>
		*bass_add[Port_ID][10] |= (0x01 << 1);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4a0d      	ldr	r2, [pc, #52]	; (800024c <GPIO_EnableClock+0x78>)
 8000218:	212c      	movs	r1, #44	; 0x2c
 800021a:	fb01 f303 	mul.w	r3, r1, r3
 800021e:	4413      	add	r3, r2
 8000220:	3328      	adds	r3, #40	; 0x28
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <GPIO_EnableClock+0x78>)
 800022a:	202c      	movs	r0, #44	; 0x2c
 800022c:	fb00 f303 	mul.w	r3, r0, r3
 8000230:	440b      	add	r3, r1
 8000232:	3328      	adds	r3, #40	; 0x28
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f042 0202 	orr.w	r2, r2, #2
 800023a:	601a      	str	r2, [r3, #0]
		break;
 800023c:	bf00      	nop
	}
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000

08000250 <GPIO_Init>:

void GPIO_Init(unsigned char Port_ID, unsigned char PinNum,
		unsigned char PinMode, unsigned char DefaultState) {
 8000250:	b490      	push	{r4, r7}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	4604      	mov	r4, r0
 8000258:	4608      	mov	r0, r1
 800025a:	4611      	mov	r1, r2
 800025c:	461a      	mov	r2, r3
 800025e:	4623      	mov	r3, r4
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	4603      	mov	r3, r0
 8000264:	71bb      	strb	r3, [r7, #6]
 8000266:	460b      	mov	r3, r1
 8000268:	717b      	strb	r3, [r7, #5]
 800026a:	4613      	mov	r3, r2
 800026c:	713b      	strb	r3, [r7, #4]

	// Configure moder register for pin direction location column 0
	*bass_add[Port_ID][0] &= ~(0x03 << 2 * PinNum);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a4d      	ldr	r2, [pc, #308]	; (80003a8 <GPIO_Init+0x158>)
 8000272:	212c      	movs	r1, #44	; 0x2c
 8000274:	fb01 f303 	mul.w	r3, r1, r3
 8000278:	4413      	add	r3, r2
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	2103      	movs	r1, #3
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	43db      	mvns	r3, r3
 800028a:	461c      	mov	r4, r3
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	4946      	ldr	r1, [pc, #280]	; (80003a8 <GPIO_Init+0x158>)
 8000290:	202c      	movs	r0, #44	; 0x2c
 8000292:	fb00 f303 	mul.w	r3, r0, r3
 8000296:	440b      	add	r3, r1
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4022      	ands	r2, r4
 800029c:	601a      	str	r2, [r3, #0]
	*(bass_add[Port_ID][0]) |= PinMode << 2 * PinNum;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a41      	ldr	r2, [pc, #260]	; (80003a8 <GPIO_Init+0x158>)
 80002a2:	212c      	movs	r1, #44	; 0x2c
 80002a4:	fb01 f303 	mul.w	r3, r1, r3
 80002a8:	4413      	add	r3, r2
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	7979      	ldrb	r1, [r7, #5]
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	461c      	mov	r4, r3
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	493a      	ldr	r1, [pc, #232]	; (80003a8 <GPIO_Init+0x158>)
 80002be:	202c      	movs	r0, #44	; 0x2c
 80002c0:	fb00 f303 	mul.w	r3, r0, r3
 80002c4:	440b      	add	r3, r1
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4322      	orrs	r2, r4
 80002ca:	601a      	str	r2, [r3, #0]
	// configure output type register OTYPER location column 1
	*bass_add[Port_ID][1] &= ~(1 << PinNum);
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4a36      	ldr	r2, [pc, #216]	; (80003a8 <GPIO_Init+0x158>)
 80002d0:	212c      	movs	r1, #44	; 0x2c
 80002d2:	fb01 f303 	mul.w	r3, r1, r3
 80002d6:	4413      	add	r3, r2
 80002d8:	3304      	adds	r3, #4
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	2101      	movs	r1, #1
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	461c      	mov	r4, r3
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	492e      	ldr	r1, [pc, #184]	; (80003a8 <GPIO_Init+0x158>)
 80002ee:	202c      	movs	r0, #44	; 0x2c
 80002f0:	fb00 f303 	mul.w	r3, r0, r3
 80002f4:	440b      	add	r3, r1
 80002f6:	3304      	adds	r3, #4
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4022      	ands	r2, r4
 80002fc:	601a      	str	r2, [r3, #0]
	*bass_add[Port_ID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4a29      	ldr	r2, [pc, #164]	; (80003a8 <GPIO_Init+0x158>)
 8000302:	212c      	movs	r1, #44	; 0x2c
 8000304:	fb01 f303 	mul.w	r3, r1, r3
 8000308:	4413      	add	r3, r2
 800030a:	3304      	adds	r3, #4
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	793b      	ldrb	r3, [r7, #4]
 8000312:	f003 0101 	and.w	r1, r3, #1
			<< PinNum;
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	461c      	mov	r4, r3
	*bass_add[Port_ID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	4921      	ldr	r1, [pc, #132]	; (80003a8 <GPIO_Init+0x158>)
 8000322:	202c      	movs	r0, #44	; 0x2c
 8000324:	fb00 f303 	mul.w	r3, r0, r3
 8000328:	440b      	add	r3, r1
 800032a:	3304      	adds	r3, #4
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4322      	orrs	r2, r4
 8000330:	601a      	str	r2, [r3, #0]
	//confiure PULLUP PULL DOWN register location column 3
	*bass_add[Port_ID][3] &= ~(0x03 << 2 * PinNum);
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <GPIO_Init+0x158>)
 8000336:	212c      	movs	r1, #44	; 0x2c
 8000338:	fb01 f303 	mul.w	r3, r1, r3
 800033c:	4413      	add	r3, r2
 800033e:	330c      	adds	r3, #12
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	79bb      	ldrb	r3, [r7, #6]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	43db      	mvns	r3, r3
 8000350:	461c      	mov	r4, r3
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4914      	ldr	r1, [pc, #80]	; (80003a8 <GPIO_Init+0x158>)
 8000356:	202c      	movs	r0, #44	; 0x2c
 8000358:	fb00 f303 	mul.w	r3, r0, r3
 800035c:	440b      	add	r3, r1
 800035e:	330c      	adds	r3, #12
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4022      	ands	r2, r4
 8000364:	601a      	str	r2, [r3, #0]
	*bass_add[Port_ID][3] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <GPIO_Init+0x158>)
 800036a:	212c      	movs	r1, #44	; 0x2c
 800036c:	fb01 f303 	mul.w	r3, r1, r3
 8000370:	4413      	add	r3, r2
 8000372:	330c      	adds	r3, #12
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	793b      	ldrb	r3, [r7, #4]
 800037a:	105b      	asrs	r3, r3, #1
 800037c:	f003 0103 	and.w	r1, r3, #3
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	461c      	mov	r4, r3
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4906      	ldr	r1, [pc, #24]	; (80003a8 <GPIO_Init+0x158>)
 800038e:	202c      	movs	r0, #44	; 0x2c
 8000390:	fb00 f303 	mul.w	r3, r0, r3
 8000394:	440b      	add	r3, r1
 8000396:	330c      	adds	r3, #12
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4322      	orrs	r2, r4
 800039c:	601a      	str	r2, [r3, #0]

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc90      	pop	{r4, r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000000 	.word	0x20000000

080003ac <GPIO_WritePin>:

unsigned char GPIO_WritePin(unsigned char Port_ID, unsigned char PinNum,
		unsigned char Data) {
 80003ac:	b490      	push	{r4, r7}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	460b      	mov	r3, r1
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	4613      	mov	r3, r2
 80003bc:	717b      	strb	r3, [r7, #5]
	unsigned char result;
// the MODER SETTING FOR The OUTPUT MODE
	if (((*bass_add[Port_ID][0] & (0x03 << 2 * PinNum)) >> (2 * PinNum)) == 1) {
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a29      	ldr	r2, [pc, #164]	; (8000468 <GPIO_WritePin+0xbc>)
 80003c2:	212c      	movs	r1, #44	; 0x2c
 80003c4:	fb01 f303 	mul.w	r3, r1, r3
 80003c8:	4413      	add	r3, r2
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	79ba      	ldrb	r2, [r7, #6]
 80003d0:	0052      	lsls	r2, r2, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	401a      	ands	r2, r3
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	fa22 f303 	lsr.w	r3, r2, r3
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d137      	bne.n	8000456 <GPIO_WritePin+0xaa>
		if (Data) {
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d018      	beq.n	800041e <GPIO_WritePin+0x72>
			//set OUTPUT data  location 5 register for the required pin
			*bass_add[Port_ID][5] |= (1 << PinNum);
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <GPIO_WritePin+0xbc>)
 80003f0:	212c      	movs	r1, #44	; 0x2c
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	4413      	add	r3, r2
 80003f8:	3314      	adds	r3, #20
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	2101      	movs	r1, #1
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	461c      	mov	r4, r3
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4917      	ldr	r1, [pc, #92]	; (8000468 <GPIO_WritePin+0xbc>)
 800040c:	202c      	movs	r0, #44	; 0x2c
 800040e:	fb00 f303 	mul.w	r3, r0, r3
 8000412:	440b      	add	r3, r1
 8000414:	3314      	adds	r3, #20
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4322      	orrs	r2, r4
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e018      	b.n	8000450 <GPIO_WritePin+0xa4>
		} else {
			//reset OUTPUT data register location 5 for the required pin
			*bass_add[Port_ID][5] &= ~(1 << PinNum);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <GPIO_WritePin+0xbc>)
 8000422:	212c      	movs	r1, #44	; 0x2c
 8000424:	fb01 f303 	mul.w	r3, r1, r3
 8000428:	4413      	add	r3, r2
 800042a:	3314      	adds	r3, #20
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	2101      	movs	r1, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	43db      	mvns	r3, r3
 800043a:	461c      	mov	r4, r3
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	490a      	ldr	r1, [pc, #40]	; (8000468 <GPIO_WritePin+0xbc>)
 8000440:	202c      	movs	r0, #44	; 0x2c
 8000442:	fb00 f303 	mul.w	r3, r0, r3
 8000446:	440b      	add	r3, r1
 8000448:	3314      	adds	r3, #20
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4022      	ands	r2, r4
 800044e:	601a      	str	r2, [r3, #0]
		}
		result = OK;
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
 8000454:	e001      	b.n	800045a <GPIO_WritePin+0xae>
	} else {
		result = NOK;
 8000456:	2301      	movs	r3, #1
 8000458:	73fb      	strb	r3, [r7, #15]
	}

return result;
 800045a:	7bfb      	ldrb	r3, [r7, #15]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bc90      	pop	{r4, r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000000 	.word	0x20000000

0800046c <main>:
unsigned int *EXT_REGS[]={APB2ENR,EXTICR1,IMR,RTSR,FTSR,PR,ISER0,ICER0};

void Delay_fn (void);
void Display(int counterdeci);
int Dcount = 0;
int main(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

	GPIO_EnableClock(0);
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff feae 	bl	80001d4 <GPIO_EnableClock>
	GPIO_EnableClock(1);
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff feab 	bl	80001d4 <GPIO_EnableClock>

	GPIO_Init(0, 0, INPUT, PULL_UP);
 800047e:	2302      	movs	r3, #2
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fee3 	bl	8000250 <GPIO_Init>
	GPIO_Init(0, 1, INPUT, PULL_UP);
 800048a:	2302      	movs	r3, #2
 800048c:	2200      	movs	r2, #0
 800048e:	2101      	movs	r1, #1
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff fedd 	bl	8000250 <GPIO_Init>

	GPIO_Init(1, 5, OUTPUT, PUSH_PULL);
 8000496:	2300      	movs	r3, #0
 8000498:	2201      	movs	r2, #1
 800049a:	2105      	movs	r1, #5
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fed7 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 6, OUTPUT, PUSH_PULL);
 80004a2:	2300      	movs	r3, #0
 80004a4:	2201      	movs	r2, #1
 80004a6:	2106      	movs	r1, #6
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff fed1 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 7, OUTPUT, PUSH_PULL);
 80004ae:	2300      	movs	r3, #0
 80004b0:	2201      	movs	r2, #1
 80004b2:	2107      	movs	r1, #7
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff fecb 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 8, OUTPUT, PUSH_PULL);
 80004ba:	2300      	movs	r3, #0
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff fec5 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 9, OUTPUT, PUSH_PULL);
 80004c6:	2300      	movs	r3, #0
 80004c8:	2201      	movs	r2, #1
 80004ca:	2109      	movs	r1, #9
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff febf 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 10, OUTPUT, PUSH_PULL);
 80004d2:	2300      	movs	r3, #0
 80004d4:	2201      	movs	r2, #1
 80004d6:	210a      	movs	r1, #10
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff feb9 	bl	8000250 <GPIO_Init>
	GPIO_Init(1, 12, OUTPUT, PUSH_PULL);
 80004de:	2300      	movs	r3, #0
 80004e0:	2201      	movs	r2, #1
 80004e2:	210c      	movs	r1, #12
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff feb3 	bl	8000250 <GPIO_Init>

//	0. Enable the bus APB2 APB2ENR location 0
*EXT_REGS[0]|=(1<<14);
 80004ea:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <main+0x13c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <main+0x13c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004f8:	601a      	str	r2, [r3, #0]
//1. Enable system configuration External Interrupt Configuration EXT0[0:3] for GPIO
// write in 4 bits to define the required pin
//// Bits[3:2:1:0] = (0:0:0:0)  -> configure EXTI0 line for PA0
*EXT_REGS[1]  &= ~(0xf<<0);
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <main+0x13c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <main+0x13c>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f022 020f 	bic.w	r2, r2, #15
 8000508:	601a      	str	r2, [r3, #0]
//2. Disable the EXTI Mask using Interrupt Mask Register (IMR)
*EXT_REGS[2]|=(1<<0);
 800050a:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <main+0x13c>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <main+0x13c>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	f042 0201 	orr.w	r2, r2, #1
 8000518:	601a      	str	r2, [r3, #0]
//3. Configure the Rising Edge / Falling Edge Trigger
*EXT_REGS[4]|=(1<<0);
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <main+0x13c>)
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <main+0x13c>)
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	f042 0201 	orr.w	r2, r2, #1
 8000528:	601a      	str	r2, [r3, #0]
//4. Core peripheral set  NVIC_ISER0 write 1 on bit #6
*EXT_REGS[6]|=(1<<6);
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <main+0x13c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <main+0x13c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000538:	601a      	str	r2, [r3, #0]

//1. Enable system configuration External Interrupt Configuration EXT0[0:3] for GPIO
// write in 4 bits to define the required pin
//// Bits[7:6:5:4] = (0:0:0:0)  -> configure EXTI0 line for PA1
*EXT_REGS[1]  &= ~(0xf<<4);
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x13c>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <main+0x13c>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000548:	601a      	str	r2, [r3, #0]
//2. Disable the EXTI Mask using Interrupt Mask Register (IMR)
*EXT_REGS[2]|=(1<<1);
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <main+0x13c>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0x13c>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f042 0202 	orr.w	r2, r2, #2
 8000558:	601a      	str	r2, [r3, #0]
//3. Configure the Rising Edge / Falling Edge Trigger
*EXT_REGS[4]|=(1<<1);
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <main+0x13c>)
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <main+0x13c>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	f042 0202 	orr.w	r2, r2, #2
 8000568:	601a      	str	r2, [r3, #0]
//4. Core peripheral set  NVIC_ISER0 write 1 on bit #6
*EXT_REGS[6] =(1<<7);
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0x13c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	601a      	str	r2, [r3, #0]

int localcount = Dcount;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x140>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	607b      	str	r3, [r7, #4]


	while (1) {

		//////////////////////////////
		*EXT_REGS[7] = (1<<6);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x13c>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	601a      	str	r2, [r3, #0]
		*EXT_REGS[7] = (1<<7);
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0x13c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	601a      	str	r2, [r3, #0]
			localcount = Dcount;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x140>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	607b      	str	r3, [r7, #4]
		//	*EXT_REGS[7]&=~(1<<6);
		//	*EXT_REGS[7]&=~(1<<7);
		*EXT_REGS[6] =(1<<6);
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x13c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	2240      	movs	r2, #64	; 0x40
 8000594:	601a      	str	r2, [r3, #0]
		*EXT_REGS[6] =(1<<7);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <main+0x13c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
		//////////////////////////////

		Display(localcount);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f84c 	bl	800063c <Display>
		*EXT_REGS[7] = (1<<6);
 80005a4:	e7e8      	b.n	8000578 <main+0x10c>
 80005a6:	bf00      	nop
 80005a8:	20000058 	.word	0x20000058
 80005ac:	20000094 	.word	0x20000094

080005b0 <Delay_fn>:
	}
	return 0;
}

void Delay_fn (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	int i ;
	for (i=0; i<1000000; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e002      	b.n	80005c2 <Delay_fn+0x12>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <Delay_fn+0x28>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	ddf8      	ble.n	80005bc <Delay_fn+0xc>
	{}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	000f423f 	.word	0x000f423f

080005dc <Increament>:
void Increament(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	Dcount=Dcount+1;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <Increament+0x28>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <Increament+0x28>)
 80005e8:	6013      	str	r3, [r2, #0]
	//clear pr // Clear the interrupt flag by writing a 1 pin A0
	 *EXT_REGS[5]|=(1<<0);
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <Increament+0x2c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <Increament+0x2c>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f042 0201 	orr.w	r2, r2, #1
 80005f8:	601a      	str	r2, [r3, #0]

}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000094 	.word	0x20000094
 8000608:	20000058 	.word	0x20000058

0800060c <Decrement>:
void Decrement(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	Dcount=Dcount-1;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Decrement+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <Decrement+0x28>)
 8000618:	6013      	str	r3, [r2, #0]
	//clear pr // Clear the interrupt flag by writing a 1 pin A1
	*EXT_REGS[5]|=(1<<1);
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <Decrement+0x2c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <Decrement+0x2c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f042 0202 	orr.w	r2, r2, #2
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000094 	.word	0x20000094
 8000638:	20000058 	.word	0x20000058

0800063c <Display>:
void Display(int counterdeci)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

		switch (counterdeci%10)
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4bca      	ldr	r3, [pc, #808]	; (8000970 <Display+0x334>)
 8000648:	fb83 2301 	smull	r2, r3, r3, r1
 800064c:	109a      	asrs	r2, r3, #2
 800064e:	17cb      	asrs	r3, r1, #31
 8000650:	1ad2      	subs	r2, r2, r3
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1aca      	subs	r2, r1, r3
 800065c:	2a09      	cmp	r2, #9
 800065e:	f200 8181 	bhi.w	8000964 <Display+0x328>
 8000662:	a301      	add	r3, pc, #4	; (adr r3, 8000668 <Display+0x2c>)
 8000664:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000668:	08000691 	.word	0x08000691
 800066c:	080006d9 	.word	0x080006d9
 8000670:	08000721 	.word	0x08000721
 8000674:	08000769 	.word	0x08000769
 8000678:	080007b1 	.word	0x080007b1
 800067c:	080007f9 	.word	0x080007f9
 8000680:	08000841 	.word	0x08000841
 8000684:	08000889 	.word	0x08000889
 8000688:	080008d5 	.word	0x080008d5
 800068c:	0800091d 	.word	0x0800091d
		{
		case 0:
			GPIO_WritePin(1, 5, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2105      	movs	r1, #5
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff fe89 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2106      	movs	r1, #6
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe84 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2107      	movs	r1, #7
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fe7f 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff fe7a 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2109      	movs	r1, #9
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fe75 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	210a      	movs	r1, #10
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fe70 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	210c      	movs	r1, #12
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff fe6b 	bl	80003ac <GPIO_WritePin>
			break;
 80006d6:	e146      	b.n	8000966 <Display+0x32a>
		case 1:
			GPIO_WritePin(1, 5, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2105      	movs	r1, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff fe65 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2106      	movs	r1, #6
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fe60 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2107      	movs	r1, #7
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff fe5b 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fe56 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2109      	movs	r1, #9
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff fe51 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	210a      	movs	r1, #10
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff fe4c 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	210c      	movs	r1, #12
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fe47 	bl	80003ac <GPIO_WritePin>

			break;
 800071e:	e122      	b.n	8000966 <Display+0x32a>
		case 2:
			GPIO_WritePin(1, 5, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	2105      	movs	r1, #5
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff fe41 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2106      	movs	r1, #6
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff fe3c 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2107      	movs	r1, #7
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fe37 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe32 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	2109      	movs	r1, #9
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff fe2d 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210a      	movs	r1, #10
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fe28 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	210c      	movs	r1, #12
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fe23 	bl	80003ac <GPIO_WritePin>

			break;
 8000766:	e0fe      	b.n	8000966 <Display+0x32a>
		case 3:
			GPIO_WritePin(1, 5, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	2105      	movs	r1, #5
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fe1d 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	2106      	movs	r1, #6
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fe18 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	2107      	movs	r1, #7
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fe13 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	2108      	movs	r1, #8
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fe0e 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2109      	movs	r1, #9
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fe09 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210a      	movs	r1, #10
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fe04 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	210c      	movs	r1, #12
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff fdff 	bl	80003ac <GPIO_WritePin>

			break;
 80007ae:	e0da      	b.n	8000966 <Display+0x32a>
		case 4:
			GPIO_WritePin(1, 5, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2105      	movs	r1, #5
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fdf9 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2106      	movs	r1, #6
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fdf4 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2107      	movs	r1, #7
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fdef 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fdea 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2109      	movs	r1, #9
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fde5 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	210a      	movs	r1, #10
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fde0 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	210c      	movs	r1, #12
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fddb 	bl	80003ac <GPIO_WritePin>

			break;
 80007f6:	e0b6      	b.n	8000966 <Display+0x32a>
		case 5:
			GPIO_WritePin(1, 5, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2105      	movs	r1, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fdd5 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2106      	movs	r1, #6
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fdd0 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	2107      	movs	r1, #7
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fdcb 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 8000816:	2201      	movs	r2, #1
 8000818:	2108      	movs	r1, #8
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fdc6 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2109      	movs	r1, #9
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fdc1 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	210a      	movs	r1, #10
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fdbc 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	210c      	movs	r1, #12
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fdb7 	bl	80003ac <GPIO_WritePin>

			break;
 800083e:	e092      	b.n	8000966 <Display+0x32a>
		case 6:
			GPIO_WritePin(1, 5, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2105      	movs	r1, #5
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fdb1 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2106      	movs	r1, #6
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff fdac 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	2107      	movs	r1, #7
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff fda7 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2108      	movs	r1, #8
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fda2 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	2109      	movs	r1, #9
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fd9d 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	210a      	movs	r1, #10
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fd98 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	210c      	movs	r1, #12
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff fd93 	bl	80003ac <GPIO_WritePin>

			break;
 8000886:	e06e      	b.n	8000966 <Display+0x32a>
		case 7:
			GPIO_WritePin(1, 5, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	2105      	movs	r1, #5
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fd8d 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	2106      	movs	r1, #6
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fd88 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	2107      	movs	r1, #7
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fd83 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fd7e 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2109      	movs	r1, #9
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fd79 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210a      	movs	r1, #10
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fd74 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	210c      	movs	r1, #12
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff fd6f 	bl	80003ac <GPIO_WritePin>
			Delay_fn();
 80008ce:	f7ff fe6f 	bl	80005b0 <Delay_fn>

			break;
 80008d2:	e048      	b.n	8000966 <Display+0x32a>
		case 8:
			GPIO_WritePin(1, 5, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2105      	movs	r1, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff fd67 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	2106      	movs	r1, #6
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fd62 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2107      	movs	r1, #7
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fd5d 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fd58 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2109      	movs	r1, #9
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fd53 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	210a      	movs	r1, #10
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fd4e 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	210c      	movs	r1, #12
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fd49 	bl	80003ac <GPIO_WritePin>

			break;
 800091a:	e024      	b.n	8000966 <Display+0x32a>
		case 9:
			GPIO_WritePin(1, 5, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2105      	movs	r1, #5
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fd43 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 6, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	2106      	movs	r1, #6
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fd3e 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 7, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	2107      	movs	r1, #7
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fd39 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 8, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	2108      	movs	r1, #8
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff fd34 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 9, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2109      	movs	r1, #9
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fd2f 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 10, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	210a      	movs	r1, #10
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fd2a 	bl	80003ac <GPIO_WritePin>
			GPIO_WritePin(1, 12, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	210c      	movs	r1, #12
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fd25 	bl	80003ac <GPIO_WritePin>

			break;
 8000962:	e000      	b.n	8000966 <Display+0x32a>


		default:
			break;
 8000964:	bf00      	nop

	  }
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	66666667 	.word	0x66666667

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f000 f811 	bl	80009ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fd4f 	bl	800046c <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009dc:	08000a54 	.word	0x08000a54
  ldr r2, =_sbss
 80009e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009e4:	20000098 	.word	0x20000098

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <__libc_init_array>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	4d0d      	ldr	r5, [pc, #52]	; (8000a24 <__libc_init_array+0x38>)
 80009f0:	4c0d      	ldr	r4, [pc, #52]	; (8000a28 <__libc_init_array+0x3c>)
 80009f2:	1b64      	subs	r4, r4, r5
 80009f4:	10a4      	asrs	r4, r4, #2
 80009f6:	2600      	movs	r6, #0
 80009f8:	42a6      	cmp	r6, r4
 80009fa:	d109      	bne.n	8000a10 <__libc_init_array+0x24>
 80009fc:	4d0b      	ldr	r5, [pc, #44]	; (8000a2c <__libc_init_array+0x40>)
 80009fe:	4c0c      	ldr	r4, [pc, #48]	; (8000a30 <__libc_init_array+0x44>)
 8000a00:	f000 f818 	bl	8000a34 <_init>
 8000a04:	1b64      	subs	r4, r4, r5
 8000a06:	10a4      	asrs	r4, r4, #2
 8000a08:	2600      	movs	r6, #0
 8000a0a:	42a6      	cmp	r6, r4
 8000a0c:	d105      	bne.n	8000a1a <__libc_init_array+0x2e>
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a14:	4798      	blx	r3
 8000a16:	3601      	adds	r6, #1
 8000a18:	e7ee      	b.n	80009f8 <__libc_init_array+0xc>
 8000a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1e:	4798      	blx	r3
 8000a20:	3601      	adds	r6, #1
 8000a22:	e7f2      	b.n	8000a0a <__libc_init_array+0x1e>
 8000a24:	08000a4c 	.word	0x08000a4c
 8000a28:	08000a4c 	.word	0x08000a4c
 8000a2c:	08000a4c 	.word	0x08000a4c
 8000a30:	08000a50 	.word	0x08000a50

08000a34 <_init>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	bf00      	nop
 8000a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3a:	bc08      	pop	{r3}
 8000a3c:	469e      	mov	lr, r3
 8000a3e:	4770      	bx	lr

08000a40 <_fini>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr
